{"version":3,"sources":["Plot/Results.js","Plot/Plot.js","Droid.js","serviceWorker.js","index.js"],"names":["Results","props","state","planet1","choices","planet2","hero","friend","unexpHero","enemy","ending","planet1Climate","planet1Terrain","planet2Climate","planet2Terrain","heroPronoun","heroPossessiveAdj","enemyObjPronoun","enemyPronoun","heroMass","enemyMass","story","getPlanetInfo","bind","getPersonInfo","writeStory","handleClick","planet","number","fetch","then","response","json","responseJSON","setState","results","climate","terrain","person","role","mass","gender","this","that","Promise","resolve","reject","window","setTimeout","fightParagraph","title","description","Modal","Dialog","Header","closeButton","Title","Body","className","Footer","Button","variant","onClick","data-toggle","data-target","id","Component","Droid","peopleList","planetsList","endings","clicked","handleInputChange","url","resultsArr","stateProp","forEach","item","push","name","next","getResources","event","target","value","choicesCopy","JSON","parse","stringify","Container","Card","bg","Form","Group","Label","Control","type","onChange","as","rows","map","index","key","Jumbotron","Plot","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ba6eb9f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Media, Card, Button, Modal } from 'react-bootstrap';\n\nclass Results extends Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n    planet1: this.props.choices.planet1,\n\t  planet2: this.props.choices.planet2,\n    hero: this.props.choices.hero,\n\t  friend: this.props.choices.friend,\n\t\tunexpHero: this.props.choices.unexpHero,\n\t\tenemy: this.props.choices.enemy,\n\t\tending: this.props.choices.ending,\n\t\tplanet1Climate: '',\n\t\tplanet1Terrain: '',\n\t\tplanet2Climate: '',\n\t\tplanet2Terrain: '',\n\t\theroPronoun: '',\n\t\theroPossessiveAdj: '',\n\t\tenemyObjPronoun: '',\n\t\tenemyPronoun: '',\n\t\theroMass: '',\n\t\tenemyMass: '',\n\t\tstory: ''\n      }\n    this.getPlanetInfo = this.getPlanetInfo.bind(this);\n    this.getPersonInfo = this.getPersonInfo.bind(this);\n    this.writeStory = this.writeStory.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n}\n\ngetPlanetInfo(planet, number) {\n  fetch('https://swapi.co/api/planets/?search=' + planet)\n    .then(response => response.json())\n\t.then(responseJSON => {\n\t  if (number === 1) {\n\t    this.setState({planet1Climate: responseJSON.results[0].climate})\n\t\tthis.setState({planet1Terrain: responseJSON.results[0].terrain})\n\t   }\n\t   else if (number === 2){\n\t\tthis.setState({planet2Climate: responseJSON.results[0].climate})\n\t\tthis.setState({planet2Terrain: responseJSON.results[0].terrain});\n\t   }\n\t})\n   }\n\ngetPersonInfo(person, role) {\n  fetch('https://swapi.co/api/people/?search=' + person)\n    .then(response => response.json())\n\t.then(responseJSON => {\n      if (role === 'hero') {\n\t\tthis.setState({heroMass: responseJSON.results[0].mass})\n\t\tif (responseJSON.results[0].gender === 'male') {\n\t\t  this.setState({heroPronoun: 'he'})\n\t\t}\n\t\telse if (responseJSON.results[0].gender === 'female') {\n\t\t  this.setState({heroPronoun: 'she'})\n\t\t}\n\t\telse {\n\t      this.setState({heroPronoun: 'they'})\n\t\t}\n\n\t\tif (responseJSON.results[0].gender === 'male') {\n\t\t  this.setState({heroPossessiveAdj: 'his'})\n\t\t}\n\n\t\telse if (responseJSON.results[0].gender === 'female') {\n\t\t  this.setState({heroPossessiveAdj: 'her'})\n\t\t}\n\t\telse {\n\t\t  this.setState({heroPossessiveAdj: 'their'})\n\t\t}\n\t  }\n\n\t  else if (role === 'enemy') {\n\t\tthis.setState({enemyMass: responseJSON.results[0].mass})\n\t\tif (responseJSON.results[0].gender === 'male') {\n\t\t  this.setState({enemyObjPronoun: 'him'})\n\t\t}\n\t    else if (responseJSON.results[0].gender === 'female') {\n\t      this.setState({enemyObjPronoun: 'her'})\n\t\t}\n\t\telse {\n\t\t  this.setState({enemyObjPronoun: 'them'})\n\t\t}\n\t\tif (responseJSON.results[0].gender === 'male') {\n\t\t  this.setState({enemyPronoun: 'he'})\n\t\t}\n\t\telse if (responseJSON.results[0].gender === 'female') {\n\t\t  this.setState({enemyPronoun: 'she'})\n\t\t}\n\t\telse {\n\t\t  this.setState({enemyPronoun: 'they'})\n\t\t}\n\t   }\n\t})\n}\n\n\nwriteStory() {\n  this.getPersonInfo(this.props.choices.hero, 'hero');\n  this.getPersonInfo(this.props.choices.enemy, 'enemy');\n  this.getPlanetInfo(this.props.choices.planet1, 1);\n  this.getPlanetInfo(this.props.choices.planet2, 2);\n  var that = this;\n\n  let promise = new Promise(function (resolve, reject) {\n\twindow.setTimeout(function(){\n\t  let ending = '';\n\t  if (that.state.ending === 'happy'){\n\t\tending = `They all went back to ${that.state.planet1} together and enjoyed the rest of their evening. `\n\t  }\n      else if (that.state.ending === 'tragic'){\n\t\tending = `Unfortunately, on the way back to ${that.state.planet1}, their starship crashed. `\n\t  }\n\t  else if (that.state.ending === 'cliffhanger'){\n\t\tending = `They were on the way back to ${that.state.planet1} when all of the sudden they saw ${that.state.     enemy} chasing them again! and this time ${that.state.enemyPronoun} brought a bunch of friend with ${that.state.enemyObjPronoun}! What will they do? `\n\t   }\n\n\t   let fightParagraph = that.state.heroMass > that.state.enemyMass ? `Because ${that.state.heroPronoun} was bigger than ${that.state.enemy}, the fight was easy and ${that.state.heroPronoun} rescued ${that.state.friend} just in time to go back home before ${that.state.heroPossessiveAdj} favorite show was over.` : `${that.state.enemy} was bigger than ${that.state.hero}, so it was a difficult fight. ${that.state.hero} looked like he was going to lose! So ${that.state.friend} got loose, grabed a rock and hit ${that.state.enemy} in the head! They made a run for it and got away from ${that.state.enemy} as fast as they could. `\n\n\t\tlet story =  `A long time ago in a galaxy far, far away... ` +\n\t\t\t\t\t`It was a regular day in the planet ${that.state.planet1}. The climate was ${that.state.planet1Climate} as usual and ${that.state.hero} was going about ${that.state.heroPossessiveAdj} usual business on the ${that.state.planet1Terrain} terrain, when suddenly, ${that.state.unexpHero} came running with the horrifying news that ${that.state.friend} had been kidnapped by ${that.state.enemy}! ` +\n\t\t\t\t\t`Immediately, ${that.state.hero} set off to ${that.state.planet2} to fight ${that.state.enemy} and rescue ${that.state.friend}. He was surprised by the ${that.state.planet2Terrain} terrain and the ${that.state.planet2Climate} climate. ` +  fightParagraph  + ending;\n\n\t\tresolve(story);\n\t});\n   })\n\n   return promise;\n}\n\nhandleClick() {\n  this.writeStory().then(story => this.setState({story: story}))\n}\n\nrender() {\n  let title = this.props.choices.title;\n  let description = this.props.choices.description;\n  let planet1 = this.props.choices.planet1;\n  let planet2 = this.props.choices.planet2;\n  let hero = this.props.choices.hero;\n  let friend = this.props.choices.friend;\n  let unexpHero = this.props.choices.unexpHero;\n  let enemy = this.props.choices.enemy;\n  let ending = this.props.choices.ending;\n\n  return (\n    <Modal.Dialog>\n      <Modal.Header closeButton>\n        <Modal.Title>{title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body className=\"head\">\n        <h5>{description}</h5>\n        <h4>You choose the following resources:</h4>\n      </Modal.Body>\n      <Modal.Body>\n        <h6>{hero}</h6>\n        <h6>{friend}</h6>\n        <h6>{enemy}</h6>\n        <h6>{unexpHero}</h6>\n        <h6>{planet1}</h6>\n        <h6>{planet2}</h6>\n        <h6>{ending}</h6>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"primary\"onClick={this.handleClick} data-toggle=\"modal\" data-target=\"#story\">Generate Plot</Button>\n        <div id=\"story\" className=\"modal \"><div id=\"move\">{this.state.story}</div></div>\n      </Modal.Footer>\n    </Modal.Dialog>\n  \t)\n  }\n}\nexport default Results;\n","import React, { Component } from 'react';\nimport { Container, Card, Form, FormGroup, FormLabel, FormControl, Button } from 'react-bootstrap';\nimport Results from './Results'\n\nclass Droid extends Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        peopleList: [],\n        planetsList: [],\n        description: '',\n        endings: ['happy', 'tragic', 'cliffhanger'],\n        choices: {\n            title: '',\n            description: '',\n            hero: 'Luke Skywalker',\n            planet1: 'Alderaan',\n            planet2: 'Alderaan',\n            enemy: 'Luke Skywalker',\n            friend: 'Luke Skywalker',\n            unexpHero: 'Luke Skywalker',\n            ending: 'happy'\n        },\n        clicked: false\n      }\n  this.handleInputChange = this.handleInputChange.bind(this);\n  this.handleClick = this.handleClick.bind(this);\n\n  }\n\ngetResources(url, resultsArr, stateProp){\n  fetch(url)\n  .then(response => response.json())\n  .then(responseJSON => {\n    responseJSON.results.forEach(item => {\n      resultsArr.push(item.name)\n    })\n    if (responseJSON.next === null) {\n      if (stateProp === 'peopleList') {\n        this.setState({peopleList: resultsArr})\n      }\n      else if (stateProp === 'planetsList') {\n        this.setState({planetsList: resultsArr})\n      }\n\n    } else {\n      this.getResources(responseJSON.next, resultsArr, stateProp)\n    }\n  })\n}\ncomponentDidMount() {\n  let peopleArr = [];\n  let planetsArr = [];\n  this.getResources('https://swapi.co/api/people/', peopleArr, 'peopleList')\n  this.getResources('https://swapi.co/api/planets/', planetsArr, 'planetsList')\n }\n\n\nhandleInputChange(event) {\n  const target = event.target;\n  const value = target.value;\n  const name = target.name;\n  const choicesCopy = JSON.parse(JSON.stringify(this.state.choices))\n  choicesCopy[name] = value;\n  this.setState({\n    choices: choicesCopy\n  });\n}\n\nhandleClick() {\n  this.setState({clicked: !this.state.clicked})\n\n}\n\nrender() {\n    return (\n      <Container>\n      <Card bg=\"transparent\">\n        <Card.Header>Star Wars Plot-Droid</Card.Header>\n        <Card.Title>Create your individual Star Wars Plot featuring your favourite Characters, Planets and Species!\n        </Card.Title>\n        <Card.Body>\n          <Form>\n          <Form.Group>\n             <Form.Label>Title:</Form.Label>\n             <Form.Control type=\"text\" name=\"title\" value={this.state.choices.title} onChange={this.handleInputChange} />\n           </Form.Group>\n           <Form.Group>\n             <Form.Label>Description:</Form.Label>\n             <Form.Control as=\"textarea\" name=\"description\" value={this.state.choices.description} onChange={this.handleInputChange} rows=\"2\" />\n           </Form.Group>\n\n          <Form.Label>Choose a hero:</Form.Label>\n          <Form.Control as=\"select\" name=\"hero\" value={this.state.choices.hero} onChange={this.handleInputChange}>\n            {this.state.peopleList.map((item, index) => <option value={item} key={index+1}>{item}</option>)}\n          </Form.Control>\n\n          <Form.Label>Choose a friend that needs help:</Form.Label>\n          <Form.Control as=\"select\" name=\"friend\" value={this.state.choices.friend} onChange={this.handleInputChange}>\n            {this.state.peopleList.map((item, index) => <option value={item} key={index+1}>{item}</option>)}\n          </Form.Control>\n\n          <Form.Label>Choose the enemy:</Form.Label>\n          <Form.Control as=\"select\"name=\"enemy\" value={this.state.choices.enemy} onChange={this.handleInputChange}>\n            {this.state.peopleList.map((item, index) => <option value={item} key={index+1}>{item}</option>)}\n          </Form.Control>\n\n          <Form.Label>Choose an unexpected helper:</Form.Label>\n          <Form.Control as=\"select\" name=\"unexpHero\" value={this.state.choices.unexpHero} onChange={this.handleInputChange}>\n            {this.state.peopleList.map((item, index) => <option value={item} key={index+1}>{item}</option>)}\n          </Form.Control>\n\n          <Form.Label>Choose the 1st Planet:</Form.Label>\n          <Form.Control as=\"select\" name=\"planet1\" value={this.state.choices.planet1}  onChange={this.handleInputChange}>\n            {this.state.planetsList.map((item, index) => <option value={item} key={index+1}>{item}</option>)}\n          </Form.Control>\n\n          <Form.Label>Choose the 2nd Planet:</Form.Label>\n          <Form.Control as=\"select\" name=\"planet2\" value={this.state.choices.planet2} onChange={this.handleInputChange}>\n            {this.state.planetsList.map((item, index) => <option value={item} key={index+1}>{item}</option>)}\n          </Form.Control>\n\n          <Form.Label>What end should your plot have:</Form.Label>\n          <Form.Control as=\"select\" name=\"ending\" value={this.state.choices.ending} onChange={this.handleInputChange}>\n            {this.state.endings.map((item, index) => <option value={item} key={index+1}>{item}</option>)}\n          </Form.Control>\n          </Form>\n        </Card.Body>\n      </Card>\n      <Button className=\"btn\" data-toggle=\"modal\" data-target=\"#1modal\" onClick={this.handleClick}>{!this.state.clicked ? \"Review Droid Instructions\" : \"New Droid\" }</Button>\n      {this.state.clicked ? <Results choices={this.state.choices}/> : null}\n            </Container>\n    );\n  }\n}\nexport default Droid;\n","import React, { Component } from 'react';\nimport { Jumbotron, Container } from 'react-bootstrap';\nimport Plot from './Plot/Plot';\nclass Droid extends Component {\n\nrender() {\n    return (\n      <Jumbotron>\n        <Plot />\n      </Jumbotron>\n    );\n  }\n}\n\nexport default Droid;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport Droid from './Droid';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Droid />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}